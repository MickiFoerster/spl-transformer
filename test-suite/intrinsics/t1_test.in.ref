int i;
double* x;
double* t1_x;
double* thread_result;
double* t1_thread_result;
#pragma omp parallel for
for(i=0;i<n;i++)
{
    int j;
    int tid;
    int p;
    double y=0.;
    double t1_y=0.;
    double v0_from0;
    double t1_v0_from0;
    double v1_from0;
    double t1_v1_from0;
    double v2_from0;
    double t1_v2_from0;
    double v3_from0;
    double t1_v3_from0;
    tid=omp_get_thread_num();
    p=omp_get_num_threads();
    j=0;
    t1_v0_from0=t1_x[i];
    v0_from0=x[i];
    t1_y=t1_v0_from0;
    y=v0_from0;
    while(j<2) {
        t1_v0_from0=t1_y;
        v0_from0=y;
        t1_v1_from0=t1_x[i];
        v1_from0=x[i];
        t1_v2_from0=t1_v0_from0*v1_from0+v0_from0*t1_v1_from0;
        v2_from0=v0_from0*v1_from0;
        t1_y=t1_v2_from0;
        y=v2_from0;
        j=j+1;
    }
    t1_v0_from0=t1_y;
    v0_from0=y;
    t1_v1_from0=t1_x[i];
    v1_from0=x[i];
    t1_v2_from0=t1_v1_from0*cos(v1_from0);
    v2_from0=sin(v1_from0);
    t1_v3_from0=t1_v0_from0*v2_from0+v0_from0*t1_v2_from0;
    v3_from0=v0_from0*v2_from0;
    t1_y=t1_v3_from0;
    y=v3_from0;
    t1_v0_from0=t1_y;
    v0_from0=y;
    t1_v1_from0=t1_x[i];
    v1_from0=x[i];
    t1_v2_from0=t1_v1_from0*(0.-sin(v1_from0));
    v2_from0=cos(v1_from0);
    t1_v3_from0=t1_v0_from0*v2_from0+v0_from0*t1_v2_from0;
    v3_from0=v0_from0*v2_from0;
    t1_y=t1_v3_from0;
    y=v3_from0;
    t1_v0_from0=t1_y;
    v0_from0=y;
    t1_v1_from0=t1_x[i];
    v1_from0=x[i];
    t1_v2_from0=t1_v1_from0*exp(v1_from0);
    v2_from0=exp(v1_from0);
    t1_v3_from0=t1_v0_from0*v2_from0+v0_from0*t1_v2_from0;
    v3_from0=v0_from0*v2_from0;
    t1_y=t1_v3_from0;
    y=v3_from0;
    t1_v0_from0=t1_y;
    v0_from0=y;
    t1_v1_from0=t1_y;
    v1_from0=y;
    t1_v2_from0=t1_v0_from0+t1_v1_from0;
    v2_from0=v0_from0+v1_from0;
    t1_y=t1_v2_from0;
    y=v2_from0;
    t1_v0_from0=t1_y;
    v0_from0=y;
    t1_v1_from0=t1_y;
    v1_from0=y;
    t1_v2_from0=t1_v0_from0-t1_v1_from0;
    v2_from0=v0_from0-v1_from0;
    t1_y=t1_v2_from0;
    y=v2_from0;
    if(i<p) {
        t1_v0_from0=t1_y;
        v0_from0=y;
        t1_thread_result[i]=t1_v0_from0;
        thread_result[i]=v0_from0;
    }
}
