double* x;
double* A;
double* thread_result;
int n;
int m;
#pragma omp parallel
{
	int tests=0;
	int tid=0;
	int p=0;
	int i=0;
	int j=0;
	int lb=0;
	int ub=0;
	int c=0;
	double y=0.;
	tid=omp_get_thread_num();
	p=omp_get_num_threads();
	c=n/p;
	lb=tid*c;
	ub=(tid+1)*c-1;
	i=lb;
	y=1.;
	while(i<=ub) {
		j=0;
		while(j<n) {
			y=y*sin(A[i*n+j]*x[j])*cos(A[i*n+j]*x[j]);
			j=j+1;
		}
		i=i+1;
	}
	thread_result[tid]=y;
	#pragma omp barrier
	#pragma omp master
	{
		i=1;
		while(i<p) {
			thread_result[0]=thread_result[0]*thread_result[i];
			i=i+1;
		}
		dummy("", (void*)thread_result);
	}
}
